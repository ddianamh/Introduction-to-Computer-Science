--function should receive and return a char
--introducing the substitutions from the table
--other characters keep their value

sub :: Char ->  Char
sub 'a' = '@'
sub 'b' = '8'
sub 'c' = '('
sub 'd' = '6'
sub 'e' = '3'
sub 'f' = '#'
sub 'g' = '9'
sub 'h' = '#'
sub 'i' = '1'
sub 'l' = '1'
sub 'o' = '0'
sub 'q' = '9'
sub 's' = '$'
sub 'x' = '%'
sub 'y' = '?'
sub x = x


--function should receive a string and return a string
--a string is a list of chars
--empty string goes to empty string
--recursively: substitutes the head every time 
--and glues it together with the "munged tail" (applying munge on the tail)

munge :: String -> String
munge [] = []
munge (x:xs) = (sub x) : (munge xs) 


